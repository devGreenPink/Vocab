// ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå
class VocabularyGame {
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
  constructor() {
    this.words = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    this.gameHistory = JSON.parse(localStorage.getItem("gameHistory") || "[]"); // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å localStorage
    this.currentSelected = null; // ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà
    this.matched = []; // ‡∏Ñ‡∏π‡πà‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    this.gameStartTime = null; // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
    this.timerInterval = null; // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    this.elements = {}; // ‡πÄ‡∏Å‡πá‡∏ö DOM elements
    this.currentEditId = null; // ID ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    this.currentDeleteId = null; // ID ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏ö
    this.pendingConfirmAction = null; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ
    this.initializeElements(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô DOM elements
    this.bindEvents(); // ‡∏ú‡∏π‡∏Å event listeners
    this.setupSplashScreen(); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô DOM elements
  initializeElements() {
    this.elements = {
      // ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå
      englishInput: document.getElementById("englishInput"),
      thaiInput: document.getElementById("thaiInput"),
      addButton: document.getElementById("addButton"),
      startButton: document.getElementById("startButton"),
      clearButton: document.getElementById("clearButton"),
      wordCount: document.getElementById("wordCount"),
      wordListContainer: document.getElementById("wordListContainer"),
      historyContainer: document.getElementById("historyContainer"),
      clearHistoryButton: document.getElementById("clearHistoryButton"),

      // ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏°
      gameSection: document.getElementById("game-section"),
      addSection: document.getElementById("add-section"),
      englishWords: document.getElementById("englishWords"),
      thaiWords: document.getElementById("thaiWords"),
      score: document.getElementById("score"),
      total: document.getElementById("total"),
      timer: document.getElementById("timer"),
      resetButton: document.getElementById("resetButton"),
      backButton: document.getElementById("backButton"),

      // ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      splashScreen: document.getElementById("splash-screen"),

      // Modal
      editModal: document.getElementById("editModal"),
      confirmModal: document.getElementById("confirmModal"),
      editNameInput: document.getElementById("editNameInput"),
      saveNameButton: document.getElementById("saveNameButton"),
      cancelEditButton: document.getElementById("cancelEditButton"),
      confirmDeleteButton: document.getElementById("confirmDeleteButton"),
      cancelDeleteButton: document.getElementById("cancelDeleteButton"),
      confirmMessage: document.getElementById("confirmMessage"),

      // Toast container
      toastContainer: document.getElementById("toast-container"),
    };
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ú‡∏π‡∏Å event listeners
  bindEvents() {
     // ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å
  this.elements.addButton.addEventListener('click', () => this.addWord());
  this.elements.startButton.addEventListener('click', () => this.startGame());
  this.elements.clearButton.addEventListener('click', () => this.clearWords());
  this.elements.clearHistoryButton.addEventListener('click', () => this.clearAllHistory());
  this.elements.resetButton.addEventListener('click', () => this.resetGame());
  this.elements.backButton.addEventListener('click', () => this.backToAdd());
  
  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î Enter ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  [this.elements.englishInput, this.elements.thaiInput].forEach(input => {
    input.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') this.addWord();
    });
  });

  // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  this.elements.englishInput.addEventListener('input', (e) => {
    let value = e.target.value.replace(/[^a-zA-Z\s]/g, '');
    if (value.length > 0) {
      value = value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();
    }
    e.target.value = value;
  });

  // Modal events - ‡πÉ‡∏ä‡πâ callback function ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
  this.elements.saveNameButton.addEventListener('click', () => this.saveHistoryName());
  this.elements.cancelEditButton.addEventListener('click', () => this.closeEditModal());
  
  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
  this.elements.confirmDeleteButton.addEventListener('click', () => {
    console.log('Confirm delete button clicked');
    console.log('pendingConfirmAction:', this.pendingConfirmAction);
    
    if (this.pendingConfirmAction) {
      this.pendingConfirmAction();
    }
    this.closeConfirmModal();
  });
  
  this.elements.cancelDeleteButton.addEventListener('click', () => {
    console.log('Cancel delete button clicked');
    this.closeConfirmModal();
  });

  // ‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° X
  document.querySelectorAll('.modal-close').forEach(closeBtn => {
    closeBtn.addEventListener('click', (e) => {
      const modal = e.target.closest('.modal');
      modal.classList.add('hidden');
    });
  });

  // ‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  [this.elements.editModal, this.elements.confirmModal].forEach(modal => {
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
      }
    });
  });

  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î Enter ‡πÉ‡∏ô modal
  this.elements.editNameInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') this.saveHistoryName();
  });
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  setupSplashScreen() {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
      this.elements.splashScreen.classList.add("hidden");
      this.elements.addSection.classList.remove("hidden");
      this.renderCurrentWords(); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      this.renderHistory(); // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Å‡∏°
    }, 3000);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà
  addWord() {
    const english = this.elements.englishInput.value.trim(); // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
    const thai = this.elements.thaiInput.value.trim(); // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!english || !thai) {
      this.showToast("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢", "warning");
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (
      this.words.some(
        (word) => word.english.toLowerCase() === english.toLowerCase()
      )
    ) {
      this.showToast("‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", "warning");
      return;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà
    this.words.push({ english, thai });

    // ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏£‡∏Å
    this.elements.englishInput.value = "";
    this.elements.thaiInput.value = "";
    this.elements.englishInput.focus();

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    this.renderCurrentWords();
    this.showToast("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "success");
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  clearWords() {
    if (this.words.length === 0) return;

    // ‡πÅ‡∏™‡∏î‡∏á confirmation modal
    this.showConfirmModal("üóëÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", () => {
      this.words = [];
      this.renderCurrentWords();
      this.showToast("‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "info");
    });
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥
  deleteWord(index) {
    this.showConfirmModal("üóëÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", () => {
      this.words.splice(index, 1);
      this.renderCurrentWords();
      this.showToast("‡∏•‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "info");
    });
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  renderCurrentWords() {
    this.elements.wordCount.textContent = this.words.length.toString();

    if (this.words.length === 0) {
      this.elements.wordListContainer.innerHTML =
        '<p style="text-align: center; color: #718096; padding: 20px;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Å‡πà‡∏≠‡∏ô</p>';
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ onclick
    this.elements.wordListContainer.innerHTML = this.words
      .map(
        (word, index) => `
    <div class="word-item">
      <div class="word-pair">
        <span class="word-eng">${word.english}</span>
        <span>‚Üí</span>
        <span class="word-thai">${word.thai}</span>
      </div>
      <button class="delete-btn" data-word-index="${index}">‡∏•‡∏ö</button>
    </div>
  `
      )
      .join("");

    // ‡∏ú‡∏π‡∏Å event listener ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å render
    this.bindWordListEvents();
  }
  // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ú‡∏π‡∏Å event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå
  bindWordListEvents() {
    // ‡∏•‡∏ö event listener ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö)
    const existingDeleteBtns =
      this.elements.wordListContainer.querySelectorAll(".delete-btn");
    existingDeleteBtns.forEach((btn) => {
      btn.replaceWith(btn.cloneNode(true)); // ‡∏•‡∏ö event listener ‡πÄ‡∏Å‡πà‡∏≤
    });

    // ‡∏ú‡∏π‡∏Å event listener ‡πÉ‡∏´‡∏°‡πà
    const deleteBtns =
      this.elements.wordListContainer.querySelectorAll(".delete-btn");
    deleteBtns.forEach((btn) => {
      btn.addEventListener("click", (e) => {
        const index = parseInt(e.target.getAttribute("data-word-index"));
        this.deleteWord(index);
      });
    });
  }
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
  startGame() {
    if (this.words.length < 2) {
      this.showToast("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏≥", "warning");
      return;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
    this.showGameIntroScreen();

    setTimeout(() => {
      this.gameStartTime = new Date();
      this.matched = [];
      this.currentSelected = null;

      this.elements.addSection.classList.add("hidden");
      this.elements.gameSection.classList.remove("hidden");

      this.renderGame();
      this.startTimer();
    }, 2000);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
  showGameIntroScreen() {
    const introScreen = document.createElement("div");
    introScreen.className = "game-intro-screen";
    introScreen.innerHTML = `
      <div class="game-intro-content">
        <div class="game-intro-title">üéÆ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°!</div>
        <div class="game-intro-subtitle">‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå</div>
      </div>
    `;
    document.body.appendChild(introScreen);

    setTimeout(() => {
      document.body.removeChild(introScreen);
    }, 2000);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏Å‡∏°
  showGameCompleteScreen() {
    const completeScreen = document.createElement("div");
    completeScreen.className = "game-complete-screen";
    completeScreen.innerHTML = `
      <div class="game-complete-content">
        <div class="celebration-emoji">üéâ</div>
        <div class="game-complete-title">‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!</div>
        <div class="game-complete-subtitle">‡∏Ñ‡∏∏‡∏ì‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!</div>
      </div>
    `;
    document.body.appendChild(completeScreen);

    setTimeout(() => {
      document.body.removeChild(completeScreen);
    }, 3000);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
  startTimer() {
    let seconds = 0;
    this.timerInterval = setInterval(() => {
      seconds++;
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = seconds % 60;
      this.elements.timer.textContent = `${minutes
        .toString()
        .padStart(2, "0")}:${remainingSeconds.toString().padStart(2, "0")}`;
    }, 1000);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
  stopTimer() {
    if (this.timerInterval) {
      clearInterval(this.timerInterval);
      this.timerInterval = null;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°
  renderGame() {
    // ‡∏™‡∏∏‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå
    const shuffledEnglish = this.shuffleArray([...this.words]);
    const shuffledThai = this.shuffleArray([...this.words]);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
    this.elements.englishWords.innerHTML = shuffledEnglish
      .map(
        (word) =>
          `<div class="card" data-type="english" data-word="${word.english}">${word.english}</div>`
      )
      .join("");

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    this.elements.thaiWords.innerHTML = shuffledThai
      .map(
        (word) =>
          `<div class="card" data-type="thai" data-word="${word.thai}">${word.thai}</div>`
      )
      .join("");

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    this.elements.score.textContent = "0";
    this.elements.total.textContent = this.words.length.toString();

    this.bindCardEvents(); // ‡∏ú‡∏π‡∏Å event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ú‡∏π‡∏Å event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î
  bindCardEvents() {
    document.querySelectorAll(".card").forEach((card) => {
      card.addEventListener("click", () => this.handleCardClick(card));
    });
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î
  handleCardClick(card) {
    if (card.classList.contains("matched")) return; // ‡∏ñ‡πâ‡∏≤‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ

    if (this.currentSelected) {
      if (this.currentSelected === card) {
        // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        card.classList.remove("selected");
        this.currentSelected = null;
        return;
      }

      if (this.currentSelected.dataset.type === card.dataset.type) {
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        this.currentSelected.classList.remove("selected");
        card.classList.add("selected");
        this.currentSelected = card;
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
      this.checkMatch(this.currentSelected, card);
    } else {
      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏£‡∏Å
      card.classList.add("selected");
      this.currentSelected = card;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
  checkMatch(card1, card2) {
    const englishCard = card1.dataset.type === "english" ? card1 : card2;
    const thaiCard = card1.dataset.type === "thai" ? card1 : card2;

    // ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    const word = this.words.find(
      (w) =>
        w.english === englishCard.dataset.word &&
        w.thai === thaiCard.dataset.word
    );

    if (word) {
      // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      [card1, card2].forEach((card) => {
        card.classList.remove("selected");
        card.classList.add("matched");
      });

      this.matched.push(word);
      this.elements.score.textContent = this.matched.length.toString();

      this.showToast("‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!", "success");

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏Å‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (this.matched.length === this.words.length) {
        setTimeout(() => this.gameComplete(), 500);
      }
    } else {
      // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ú‡∏¥‡∏î - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏π‡πà
      [card1, card2].forEach((card) => {
        card.style.background = "#fed7d7";
        setTimeout(() => {
          card.style.background = "";
          card.classList.remove("selected");
        }, 500);
      });

      this.showToast("‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "error");
    }

    this.currentSelected = null;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏ö‡πÄ‡∏Å‡∏°
  gameComplete() {
    if (!this.gameStartTime) return;
  
  this.stopTimer();
  const endTime = new Date();
  const timeSpent = Math.round((endTime.getTime() - this.gameStartTime.getTime()) / 1000);
  
  const gameRecord = {
    id: Date.now(),
    name: `‡πÄ‡∏Å‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${endTime.toLocaleDateString('th-TH')}`,
    words: [...this.words],
    completedAt: endTime.toISOString(),
    timeSpent: timeSpent,
    wordsCount: this.words.length
  };

  this.gameHistory.unshift(gameRecord);
  if (this.gameHistory.length > 10) {
    this.gameHistory = this.gameHistory.slice(0, 10);
  }
  
  localStorage.setItem('gameHistory', JSON.stringify(this.gameHistory));
  
  this.showGameCompleteScreen();
  this.showToast(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${timeSpent} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`, 'success');
  
  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  this.words = [];
  
  setTimeout(() => {
    this.backToAdd();
    this.renderCurrentWords(); // render ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    this.renderHistory(); // render ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà
  }, 3000);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
  resetGame() {
    this.matched = [];
    this.currentSelected = null;
    this.gameStartTime = new Date();
    this.stopTimer();
    this.renderGame();
    this.startTimer();
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå
  backToAdd() {
    this.stopTimer();
    this.elements.gameSection.classList.add("hidden");
    this.elements.addSection.classList.remove("hidden");
    this.currentSelected = null;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏Å‡∏°
  renderHistory() {
    if (this.gameHistory.length === 0) {
      this.elements.historyContainer.innerHTML = '<p style="text-align: center; color: #718096; padding: 20px;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô</p>';
      return;
    }
  
    this.elements.historyContainer.innerHTML = this.gameHistory.map(record => {
      const date = new Date(record.completedAt);
      const formattedDate = date.toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
  
      return `
        <div class="history-item">
          <div class="history-header">
            <span class="history-title">${record.name || `‡πÄ‡∏Å‡∏° ${formattedDate}`}</span>
            <div class="history-stats">
              <span>üìù ${record.wordsCount} ‡∏Ñ‡∏≥</span>
              <span>‚è∞ ${record.timeSpent} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</span>
              <button type="button" class="edit-btn" data-record-id="${record.id}">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
              <button type="button" class="play-again-btn" data-record-id="${record.id}">‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</button>
              <button type="button" class="delete-history-btn" data-record-id="${record.id}">üóëÔ∏è ‡∏•‡∏ö</button>
            </div>
          </div>
          <div class="history-words">
            ${record.words.map(word => `
              <div class="history-word">
                <span>${word.english}</span>
                <span>${word.thai}</span>
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }).join('');
  
    // ‡∏ú‡∏π‡∏Å event listener ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å render
    this.bindHistoryEvents();
  }
  bindHistoryEvents() {
 // ‡πÉ‡∏ä‡πâ event delegation ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å event ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°
  // ‡∏•‡∏ö event listener ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
  const newHistoryContainer = this.elements.historyContainer.cloneNode(true);
  this.elements.historyContainer.parentNode.replaceChild(newHistoryContainer, this.elements.historyContainer);
  this.elements.historyContainer = newHistoryContainer;

  // ‡πÉ‡∏ä‡πâ event delegation - ‡∏ú‡∏π‡∏Å event ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà container
  this.elements.historyContainer.addEventListener('click', (e) => {
    const recordId = parseInt(e.target.getAttribute('data-record-id'));
    
    if (!recordId) return; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ record id ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
    
    if (e.target.classList.contains('edit-btn')) {
      console.log('Edit button clicked for record:', recordId);
      this.editHistoryName(recordId);
    } 
    else if (e.target.classList.contains('play-again-btn')) {
      console.log('Play again button clicked for record:', recordId);
      this.playAgain(recordId);
    } 
    else if (e.target.classList.contains('delete-history-btn')) {
      console.log('Delete button clicked for record:', recordId);
      this.deleteHistory(recordId);
    }
  });
  }
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
  editHistoryName(recordId) {
    const record = this.gameHistory.find((r) => r.id === recordId);
    if (!record) return;

    this.currentEditId = recordId;
    this.elements.editNameInput.value = record.name || "";
    this.elements.editModal.classList.remove("hidden");
    this.elements.editNameInput.focus();
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
  saveHistoryName() {
    const newName = this.elements.editNameInput.value.trim();
    if (!newName) {
      this.showToast("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠", "warning");
      return;
    }

    const record = this.gameHistory.find((r) => r.id === this.currentEditId);
    if (record) {
      record.name = newName;
      localStorage.setItem("gameHistory", JSON.stringify(this.gameHistory));
      this.renderHistory();
      this.closeEditModal();
      this.showToast("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "success");
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  closeEditModal() {
    this.elements.editModal.classList.add("hidden");
    this.currentEditId = null;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
  deleteHistory(recordId) {
    console.log('deleteHistory called with recordId:', recordId);
    console.log('Current gameHistory:', this.gameHistory);
    
    const record = this.gameHistory.find(r => r.id === recordId);
    if (!record) {
      console.log('Record not found!');
      this.showToast('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö', 'error');
      return;
    }
    
    console.log('Found record to delete:', record);
    this.currentDeleteId = recordId;
    this.elements.confirmMessage.textContent = `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ "${record.name}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`;
    this.elements.confirmModal.classList.remove('hidden');
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ callback function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    this.pendingConfirmAction = () => {
      console.log('Confirming delete for recordId:', recordId);
      this.gameHistory = this.gameHistory.filter(r => r.id !== recordId);
      console.log('Updated gameHistory:', this.gameHistory);
      localStorage.setItem('gameHistory', JSON.stringify(this.gameHistory));
      this.renderHistory();
      this.showToast('‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'info');
    };
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
  confirmDeleteHistory() {
    this.gameHistory = this.gameHistory.filter(
      (r) => r.id !== this.currentDeleteId
    );
    localStorage.setItem("gameHistory", JSON.stringify(this.gameHistory));
    this.renderHistory();
    this.closeConfirmModal();
    this.showToast("‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "info");
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
  closeConfirmModal() {
    this.elements.confirmModal.classList.add('hidden');
    this.currentDeleteId = null;
    this.pendingConfirmAction = null; // reset callback
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  clearAllHistory() {
    if (this.gameHistory.length === 0) {
      this.showToast("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á", "warning");
      return;
    }

    this.showConfirmModal("üóëÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", () => {
      this.gameHistory = [];
      localStorage.setItem("gameHistory", JSON.stringify(this.gameHistory));
      this.renderHistory();
      this.showToast("‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "info");
    });
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
  playAgain(recordId) {
    const record = this.gameHistory.find((r) => r.id === recordId);
    if (!record) return;

    this.showConfirmModal(
      "üéÆ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n(‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà)",
      () => {
        this.words = [...record.words];
        this.renderCurrentWords();
        this.startGame();
      }
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
  shuffleArray(array) {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Toast ‡πÅ‡∏ó‡∏ô alert
  showToast(message, type = "info") {
    const toast = document.createElement("div");
    toast.className = `toast ${type}`;

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    const icons = {
      success: "‚úÖ",
      error: "‚ùå",
      warning: "‚ö†Ô∏è",
      info: "‚ÑπÔ∏è",
    };

    toast.innerHTML = `
      <span class="toast-icon">${icons[type] || icons.info}</span>
      <span class="toast-content">${message}</span>
      <button class="toast-close">&times;</button>
      <div class="toast-progress"></div>
    `;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î
    toast.querySelector(".toast-close").addEventListener("click", () => {
      this.removeToast(toast);
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ container
    this.elements.toastContainer.appendChild(toast);

    // ‡∏•‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á 4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
      this.removeToast(toast);
    }, 4000);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö toast
  removeToast(toast) {
    if (toast && toast.parentNode) {
      toast.style.animation = "slideOutRight 0.3s ease-in-out forwards";
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 300);
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á confirmation modal ‡πÅ‡∏ó‡∏ô confirm
  showConfirmModal(message, onConfirm) {
    this.elements.confirmMessage.textContent = message;
  this.elements.confirmModal.classList.remove('hidden');
  
  // ‡πÄ‡∏Å‡πá‡∏ö callback function ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô instance ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á event listener ‡πÉ‡∏´‡∏°‡πà
  this.pendingConfirmAction = onConfirm;
  }
}

document.addEventListener("DOMContentLoaded", () => {
  window.game = new VocabularyGame();
});
